How did viewing a diff between two versions of a file help you see the bug that was introduced?
It narrowed down the 1000+ lines to a couple of lines that were different from each other. Thus, looking for a bug became 1000 times easier only by narrowing down the search space.

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?
I'd be able to look back on how I used to solve problems and whether these solutions were efficient and the best solution for that specific problem or not. I'd be able to learn from my mistakes.

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?
Pros:
	Doesn't fill up the history with unwanted and unuseful commits
	Each and every commit is a working copy of the project and can be used to run the project without errors
	Every commit has a comment which explains what was done
Cons:
	I might forget to commit and end up losing my work
	Takes time

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?
Because each system was created for a different reason. Git is code-oriented; thus it is very important for a developer to commit multiple files in one single commit because that's just how programming goes. One simply never develops a program in just one single file. Google docs on the other hand is not code-oriented. It's mainly there for editing a single file on the cloud. Each and every file is completely independent.

How can you use the commands git log and git diff to view the history of files?
git log shows the entire log history of commits in the current repository
git diff on the other hand shows the differences in the file(s) of two specific commits. git diff is typed followed by the IDs of the two specific commits I want to compare. 

How might using version control make you more confident to make changes that could break something?
Because if something goes wrong, I'm sure I can go back to the point before when everything was working perfectly fine. Even if I don't know when exactly did this something go wrong, I can go through all the previous versions untill I find the breaking point.

Now that you have your workspace set up, what do you want to try using Git for?
creating a new repository