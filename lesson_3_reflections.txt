When would you want to use a remote repository rather than keeping all your work local?
When I work on a project with a team of developers. Or maybe when I have more than one machine I can work on and I want to keep all my work synhronized without duplication.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
Automatic update might mess up my work.

Describe the differences between forks, clones, and branches. When would you use one instead of another?
A fork clones a repository on Github to another repository on GitHub.
A clone could be used to clone a repository on my local machine to another repository on my local machine or a repository on GitHub to a repository on my local machine.
A brach is used to create a new branch on the same repository.
I'd use a fork to clone someone's repository that I'm not a contributor on so that I can make changes to it. I'd use a clone to make a copy of a repository that I have on my machine to a new directory or when I need to clone a repository from GitHub to my local machine to add changes to it. And lastly, I'd use a branch if I want to add a new feature to the current project.

What is the benefit of having a copy of the last known state of the remote stored locally?
It's very handy if I'm working with no internet connection and I want to see the state of a file or recall changes I've made to a file.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
I would probably create a file on google docs for each file that I want to collaborate with another team member on. Managing the entire project would be so much harder as it's not in one place. Showing my changes to others for them to review and comment on would be easier than GitHub.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
Making changes in a separate branch would be very useful when I want another collaborator to review my changes before committing them to the master branch. It's also useful when I'm running an open source live project and me any my team want to add new features to it without harming the live project so that other users can still find and use it.  Making changes directly in the master branch saves time and is safe to use with a regular (not open source) project.